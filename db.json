{
   "questions": [
      {
         "Вопрос": "Что такое JavaScript?",
         "Ответ": "JavaScript — это высокоуровневый, динамически типизированный, интерпретируемый язык программирования. Он является одним из основных языков веба и используется для создания интерактивных пользовательских интерфейсов.",
         "Сложность": 1
      },
      {
         "Вопрос": "Какие типы данных есть в JavaScript?",
         "Ответ": "В JavaScript есть примитивные типы: String, Number, Boolean, Null, Undefined, Symbol, BigInt. И один сложный тип: Object.",
         "Сложность": 1
      },
      {
         "Вопрос": "В чем разница между `==` и `===`?",
         "Ответ": "`==` (нестрогое равенство) сравнивает значения после приведения типов, а `===` (строгое равенство) сравнивает и значения, и типы без приведения.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое `null` и `undefined` в JavaScript?",
         "Ответ": "`undefined` означает, что переменная была объявлена, но ей не было присвоено значение. `null` — это значение, которое явно присваивается переменной для обозначения отсутствия объекта.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое замыкание (closure) в JavaScript?",
         "Ответ": "Замыкание — это комбинация функции и лексического окружения, в котором эта функция была определена. Проще говоря, это функция, которая 'помнит' переменные из своей внешней области видимости, даже после того, как внешняя функция завершила свое выполнение.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `this` в JavaScript?",
         "Ответ": "`this` — это ключевое слово, которое ссылается на контекст выполнения функции. Его значение определяется тем, как функция вызывается. В глобальной области видимости `this` ссылается на глобальный объект (`window` в браузере). В методе объекта `this` ссылается на сам объект.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое поднятие (hoisting)?",
         "Ответ": "Поднятие — это механизм в JavaScript, при котором объявления переменных (с `var`) и функций перемещаются вверх своей области видимости перед выполнением кода. Это позволяет использовать функции до их объявления в коде.",
         "Сложность": 3
      },
      {
         "Вопрос": "В чем разница между `let`, `const` и `var`?",
         "Ответ": "`var` имеет функциональную или глобальную область видимости и подвержен поднятию. `let` и `const` имеют блочную область видимости. `let` позволяет переприсваивать значение переменной, а `const` объявляет константу, значение которой нельзя изменить (для примитивов) или переприсвоить (для объектов).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое стрелочные функции (arrow functions)?",
         "Ответ": "Стрелочные функции — это синтаксический сахар для создания функций в ES6. Они имеют более короткий синтаксис и лексически связывают `this`, то есть `this` внутри стрелочной функции такой же, как и снаружи.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое Promise в JavaScript?",
         "Ответ": "Promise — это объект, представляющий результат асинхронной операции, который может быть либо успешно выполнен (`resolved`), либо отклонен (`rejected`). Он используется для работы с асинхронным кодом, избегая 'ада колбэков'.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `async/await`?",
         "Ответ": "`async/await` — это синтаксическая надстройка над промисами, которая позволяет писать асинхронный код так, будто он синхронный. Функция, объявленная с `async`, всегда возвращает промис. `await` приостанавливает выполнение `async` функции до тех пор, пока промис не будет разрешен.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое Event Loop?",
         "Ответ": "Event Loop (цикл событий) — это механизм, который позволяет JavaScript выполнять неблокирующие операции. Он постоянно проверяет очередь сообщений (callback queue) и, если стек вызовов (call stack) пуст, перемещает первое сообщение из очереди в стек для выполнения.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое прототипное наследование?",
         "Ответ": "Это механизм в JavaScript, с помощью которого объекты могут наследовать свойства и методы друг от друга. Каждый объект имеет скрытое свойство `[[Prototype]]` (доступное через `__proto__`), которое ссылается на другой объект (его прототип).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `call`, `apply` и `bind`?",
         "Ответ": "Это методы, которые позволяют управлять контекстом `this` у функции. `call` и `apply` немедленно вызывают функцию с указанным `this` и аргументами (`call` принимает аргументы списком, `apply` — массивом). `bind` создает новую функцию с привязанным `this` и начальными аргументами, которую можно вызвать позже.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `map`, `filter`, `reduce`?",
         "Ответ": "Это методы массивов для функционального программирования. `map` создает новый массив, применяя функцию к каждому элементу исходного. `filter` создает новый массив с элементами, прошедшими проверку. `reduce` применяет функцию-аккумулятор к каждому элементу, сводя массив к одному значению.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое деструктуризация?",
         "Ответ": "Деструктуризация — это синтаксис, который позволяет 'распаковывать' значения из массивов или свойства из объектов в отдельные переменные.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое Spread и Rest операторы?",
         "Ответ": "Spread (`...`) 'разворачивает' итерируемые элементы (например, массив) в местах, где ожидается ноль или более аргументов или элементов. Rest (`...`) 'собирает' оставшиеся элементы в массив, используется в параметрах функции.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `Symbol`?",
         "Ответ": "`Symbol` — это примитивный тип данных, экземпляры которого уникальны и неизменяемы. Они часто используются в качестве ключей для свойств объектов, чтобы избежать конфликтов имен.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Set` и `Map`?",
         "Ответ": "`Set` — это коллекция уникальных значений. `Map` — это коллекция пар ключ-значение, где ключом может быть любой тип данных. В отличие от объектов, `Map` сохраняет порядок вставки элементов.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `WeakMap` и `WeakSet`?",
         "Ответ": "Это 'слабые' версии `Map` и `Set`. Они хранят слабые ссылки на объекты, что означает, что если на объект не осталось других ссылок, сборщик мусора может его удалить, даже если он находится в `WeakMap` или `WeakSet`.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое рекурсия?",
         "Ответ": "Рекурсия — это техника программирования, при которой функция вызывает саму себя. Для корректной работы рекурсивная функция должна иметь базовый случай, который прекращает рекурсию.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое 'use strict'?",
         "Ответ": "`'use strict';` — это директива, которая включает 'строгий режим' в JavaScript. Этот режим вносит ряд изменений, делая код более безопасным, например, запрещая использование необъявленных переменных и превращая некоторые 'тихие' ошибки в явные.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое IFFE (Immediately Invoked Function Expression)?",
         "Ответ": "Это функция, которая выполняется сразу после ее определения. IFFE используется для создания локальной области видимости и избежания загрязнения глобального пространства имен.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое полифил (polyfill)?",
         "Ответ": "Полифил — это фрагмент кода (обычно JavaScript), который реализует функциональность, отсутствующую в старых браузерах, но существующую в современных стандартах.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое DOM (Document Object Model)?",
         "Ответ": "DOM — это программный интерфейс для HTML и XML документов. Он представляет страницу в виде дерева объектов, что позволяет JavaScript изменять структуру, стиль и содержимое документа.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое всплытие и погружение событий (event bubbling and capturing)?",
         "Ответ": "Это две фазы обработки событий в DOM. Погружение (capturing) — событие спускается от корневого элемента к целевому. Всплытие (bubbling) — событие поднимается от целевого элемента к корневому. По умолчанию обработчики работают на фазе всплытия.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое делегирование событий (event delegation)?",
         "Ответ": "Это техника, при которой один обработчик событий назначается родительскому элементу для обработки событий, происходящих на его дочерних элементах. Это эффективно, особенно для динамически добавляемых элементов.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `localStorage` и `sessionStorage`?",
         "Ответ": "Это механизмы веб-хранилища. `localStorage` хранит данные без срока истечения, они доступны даже после закрытия браузера. `sessionStorage` хранит данные только для текущей сессии (данные удаляются при закрытии вкладки).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `CORS` (Cross-Origin Resource Sharing)?",
         "Ответ": "CORS — это механизм, который позволяет веб-странице запрашивать ресурсы с другого домена (источника). Браузеры блокируют такие запросы по соображениям безопасности (Same-Origin Policy), и CORS предоставляет способ обойти это ограничение.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое JSON?",
         "Ответ": "JSON (JavaScript Object Notation) — это легковесный формат обмена данными, основанный на синтаксисе объектов JavaScript. Он легко читается и пишется людьми и легко парсится машинами.",
         "Сложность": 2
      },
      {
         "Вопрос": "Как работает `JSON.stringify()` и `JSON.parse()`?",
         "Ответ": "`JSON.stringify()` преобразует объект JavaScript в строку JSON. `JSON.parse()` преобразует строку JSON в объект JavaScript.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое `AJAX`?",
         "Ответ": "AJAX (Asynchronous JavaScript and XML) — это подход к веб-разработке для создания асинхронных веб-приложений. Он позволяет отправлять и получать данные с сервера асинхронно, не перезагружая всю страницу.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое Webpack?",
         "Ответ": "Webpack — это сборщик модулей для JavaScript. Он берет модули с зависимостями и собирает их в статические ассеты, которые может понять браузер.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое Babel?",
         "Ответ": "Babel — это транспайлер JavaScript. Он преобразует код, написанный на современных стандартах JavaScript (ES6+), в обратно совместимую версию, которая может работать в старых браузерах.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `arguments` в функции?",
         "Ответ": "`arguments` — это псевдо-массив, доступный внутри всех (не стрелочных) функций, который содержит все аргументы, переданные в эту функцию.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `NaN` и как его проверить?",
         "Ответ": "`NaN` (Not a Number) — это специальное числовое значение, которое представляет собой результат некорректной или неопределенной математической операции. Проверить на `NaN` можно с помощью функции `isNaN()` или `Number.isNaN()`. `NaN` не равен самому себе (`NaN === NaN` вернет `false`).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `setTimeout` и `setInterval`?",
         "Ответ": "`setTimeout` выполняет функцию один раз через указанный промежуток времени. `setInterval` выполняет функцию многократно через заданный интервал.",
         "Сложность": 2
      },
      {
         "Вопрос": "Как остановить выполнение `setInterval`?",
         "Ответ": "Нужно использовать `clearInterval()`, передав в него идентификатор интервала, который возвращает `setInterval`.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое чистота функции (pure function)?",
         "Ответ": "Чистая функция — это функция, которая при одинаковых входных данных всегда возвращает одинаковый результат и не имеет побочных эффектов (не изменяет внешние переменные, не делает I/O операции и т.д.).",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое каррирование (currying)?",
         "Ответ": "Каррирование — это трансформация функции с несколькими аргументами в последовательность вложенных функций с одним аргументом.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `ESLint`?",
         "Ответ": "ESLint — это статический анализатор кода для выявления проблемных паттернов в JavaScript коде. Он помогает поддерживать единый стиль кода и избегать ошибок.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `Promise.all`?",
         "Ответ": "`Promise.all` принимает массив промисов и возвращает новый промис, который будет выполнен, когда все промисы в массиве будут выполнены. Если хотя бы один промис будет отклонен, `Promise.all` немедленно отклоняется.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Promise.race`?",
         "Ответ": "`Promise.race` принимает массив промисов и возвращает новый промис, который будет выполнен или отклонен, как только один из промисов в массиве будет выполнен или отклонен.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Promise.allSettled`?",
         "Ответ": "`Promise.allSettled` принимает массив промисов и возвращает новый промис, который выполняется после того, как все промисы в массиве завершились (либо выполнены, либо отклонены). Результат — массив объектов, описывающих состояние каждого промиса.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `Promise.any`?",
         "Ответ": "`Promise.any` принимает массив промисов и возвращает новый промис, который будет выполнен, как только один из промисов в массиве будет выполнен. Если все промисы отклонены, он отклоняется с `AggregateError`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Как работает сборщик мусора в JavaScript?",
         "Ответ": "Сборщик мусора (Garbage Collector) — это процесс, который автоматически освобождает память, занятую объектами, которые больше не достижимы из кода. Основной алгоритм — 'mark-and-sweep' (пометь и очисти).",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `yield` и генераторы?",
         "Ответ": "Генераторы — это специальные функции (`function*`), которые могут приостанавливать свое выполнение, возвращать промежуточный результат с помощью `yield` и возобновлять его позже. Они полезны для создания итераторов.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `Proxy` объект?",
         "Ответ": "`Proxy` — это объект, который позволяет создавать 'ловушки' (traps) для фундаментальных операций с объектом (например, чтение свойства, присваивание, вызов функции). Это позволяет перехватывать и настраивать поведение объектов.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `Reflect`?",
         "Ответ": "`Reflect` — это встроенный объект, который предоставляет методы для перехватываемых операций JavaScript. Эти методы соответствуют 'ловушкам' для `Proxy`. `Reflect` упрощает работу с прокси и предоставляет стандартные способы выполнения операций над объектами.",
         "Сложность": 8
      },
      {
         "Вопрос": "В чем разница между `Object.seal()` и `Object.freeze()`?",
         "Ответ": "`Object.seal()` предотвращает добавление новых и удаление существующих свойств, но позволяет изменять значения существующих. `Object.freeze()` делает то же самое, что и `seal`, но дополнительно делает все свойства неизменяемыми (read-only).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое шаблонные строки (template literals)?",
         "Ответ": "Это строки, заключенные в обратные кавычки (``), которые позволяют встраивать выражения (например, `${variable}`) и создавать многострочные строки.",
         "Сложность": 1
      },
      {
         "Вопрос": "Что такое Strict Mode в JavaScript?",
         "Ответ": "Строгий режим (`'use strict'`) — это способ выбрать ограниченный вариант JavaScript. Он помогает выявлять распространенные ошибки и предотвращает использование 'небезопасных' действий. Например, он превращает некоторые тихие ошибки в исключения.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое TypeScript?",
         "Ответ": "TypeScript — это язык программирования, который является надмножеством JavaScript. Он добавляет статическую типизацию, что позволяет выявлять ошибки на этапе компиляции, а не во время выполнения.",
         "Сложность": 2
      },
      {
         "Вопрос": "Зачем нужен TypeScript?",
         "Ответ": "TS нужен для повышения надежности и поддерживаемости кода. Статическая типизация помогает избегать ошибок, связанных с типами, улучшает автодополнение в IDE и делает код более читаемым и понятным для других разработчиков.",
         "Сложность": 3
      },
      {
         "Вопрос": "Какие основные типы есть в TypeScript?",
         "Ответ": "В TypeScript есть все типы из JavaScript, а также дополнительные: `any`, `unknown`, `never`, `void`, `enum`, `tuple`, `interface`, `type`.",
         "Сложность": 2
      },
      {
         "Вопрос": "В чем разница между `any` и `unknown`?",
         "Ответ": "`any` полностью отключает проверку типов, позволяя делать с переменной что угодно. `unknown` — это более безопасный аналог; перед выполнением каких-либо операций с переменной типа `unknown` необходимо сузить ее тип с помощью проверок.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `interface` и `type` в TypeScript? В чем разница?",
         "Ответ": "Оба служат для определения формы объектов. Основные отличия: `interface` можно расширять (merging declarations), и он используется для описания 'контрактов' классов. `type` может определять не только объекты, но и псевдонимы для примитивов, объединения (union) и пересечения (intersection). В большинстве случаев они взаимозаменяемы.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `enum`?",
         "Ответ": "`enum` (перечисление) — это способ дать имена набору числовых или строковых констант. Он улучшает читаемость кода.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое дженерики (Generics) в TypeScript?",
         "Ответ": "Дженерики — это способ создавать переиспользуемые компоненты, которые могут работать с разными типами данных. Они позволяют писать функции или классы, тип которых будет определен позже, при их использовании.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `Union` и `Intersection` типы?",
         "Ответ": "`Union` (объединение, `|`) позволяет переменной иметь один из нескольких типов. `Intersection` (пересечение, `&`) позволяет объединить несколько типов в один, который будет обладать свойствами всех объединенных типов.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `keyof` и `typeof` в TypeScript?",
         "Ответ": "`keyof` создает тип, который является объединением всех ключей объекта. `typeof` используется для получения типа переменной или свойства.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Utility Types`? Приведите примеры.",
         "Ответ": "Это встроенные типы-утилиты, которые помогают трансформировать существующие типы. Примеры: `Partial<T>` (делает все свойства `T` опциональными), `Required<T>` (делает все свойства `T` обязательными), `Readonly<T>` (делает все свойства `T` только для чтения), `Pick<T, K>` (выбирает из `T` набор свойств `K`).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое сужение типов (Type Narrowing)?",
         "Ответ": "Это процесс, при котором TypeScript уточняет тип переменной внутри определенного блока кода. Это можно сделать с помощью проверок типа (`typeof`), проверок на истинность, `instanceof` и других конструкций.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое Type Assertion (утверждение типа)?",
         "Ответ": "Это способ сообщить компилятору, что вы знаете о типе значения больше, чем он. Используется синтаксис `value as Type` или `<Type>value`. Это следует использовать осторожно, так как можно 'обмануть' компилятор.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое файл `tsconfig.json`?",
         "Ответ": "Это файл конфигурации для проекта TypeScript. Он указывает корневые файлы и опции компилятора, необходимые для компиляции проекта.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `never` тип?",
         "Ответ": "Тип `never` представляет значение, которое никогда не произойдет. Например, он используется для функций, которые всегда выбрасывают исключение или входят в бесконечный цикл.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `Mapped Types`?",
         "Ответ": "Это способ создания новых типов на основе существующих путем итерации по их свойствам. `Utility Types` вроде `Partial` и `Readonly` являются примерами Mapped Types.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `Conditional Types`?",
         "Ответ": "Это типы, которые выбираются на основе условия. Они имеют синтаксис `T extends U ? X : Y` и позволяют создавать сложные логические типы.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `infer` в TypeScript?",
         "Ответ": "Ключевое слово `infer` используется в условных типах для вывода типа из другой части этого типа. Это позволяет 'извлекать' типы, например, тип возвращаемого значения функции.",
         "Сложность": 8
      },
      {
         "Вопрос": "Как типизировать пропсы в React компоненте?",
         "Ответ": "Можно использовать `interface` или `type` для описания объекта пропсов. В функциональных компонентах тип пропсов указывается после имени компонента, например, `const MyComponent: React.FC<Props> = (props) => ...`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `declare` в TypeScript?",
         "Ответ": "`declare` используется для объявления переменных, функций или модулей, которые существуют где-то еще (например, в сторонней JS-библиотеке или в глобальном окружении браузера), но TypeScript о них не знает.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое файлы с расширением `.d.ts`?",
         "Ответ": "Это файлы объявлений типов (declaration files). Они содержат только информацию о типах и не содержат исполняемого кода. Они нужны, чтобы TypeScript мог понимать структуру JavaScript-библиотек.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `React`?",
         "Ответ": "React — это JavaScript-библиотека для создания пользовательских интерфейсов. Ее основная идея — построение UI из небольших, изолированных и переиспользуемых частей, называемых компонентами.",
         "Сложность": 1
      },
      {
         "Вопрос": "Что такое `JSX`?",
         "Ответ": "JSX (JavaScript XML) — это расширение синтаксиса JavaScript, которое позволяет писать HTML-подобный код прямо в JavaScript. Он используется в React для описания структуры UI.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое виртуальный DOM (Virtual DOM)?",
         "Ответ": "Виртуальный DOM — это легковесная копия реального DOM, хранящаяся в памяти. React использует его для повышения производительности. При изменении состояния компонента React создает новый виртуальный DOM, сравнивает его со старым, находит различия и обновляет только измененные части реального DOM.",
         "Сложность": 5
      },
      {
         "Вопрос": "В чем разница между классовыми и функциональными компонентами?",
         "Ответ": "Классовые компоненты — это классы ES6, наследующиеся от `React.Component`, использующие методы жизненного цикла и управляющие состоянием через `this.state`. Функциональные компоненты — это простые JavaScript функции, которые с появлением хуков могут иметь состояние (`useState`) и побочные эффекты (`useEffect`). Функциональные компоненты с хуками являются современным подходом.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое состояние (state) в React?",
         "Ответ": "Состояние — это объект, который хранит данные, специфичные для компонента. Когда состояние компонента меняется, React автоматически перерисовывает (re-renders) этот компонент.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое пропсы (props) в React?",
         "Ответ": "Пропсы (от 'properties') — это данные, которые передаются от родительского компонента к дочернему. Пропсы являются неизменяемыми (read-only) для дочернего компонента.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое жизненный цикл компонента в React?",
         "Ответ": "Это последовательность фаз, через которые проходит компонент: монтирование (mounting), обновление (updating) и размонтирование (unmounting). В классовых компонентах для каждой фазы есть свои методы (например, `componentDidMount`, `componentDidUpdate`), в функциональных — используется хук `useEffect`.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое ключ (`key`) в React и зачем он нужен?",
         "Ответ": "Ключ — это специальный строковый атрибут, который нужно указывать при создании списков элементов. Ключи помогают React определять, какие элементы были изменены, добавлены или удалены, что делает процесс обновления более эффективным.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое хуки (Hooks) в React?",
         "Ответ": "Хуки — это функции, которые позволяют 'подключаться' к состоянию и методам жизненного цикла React из функциональных компонентов. Они позволяют использовать состояние и другие возможности React без написания классов.",
         "Сложность": 3
      },
      {
         "Вопрос": "Для чего используется хук `useState`?",
         "Ответ": "`useState` — это хук, который добавляет локальное состояние в функциональный компонент. Он возвращает массив из двух элементов: текущее значение состояния и функцию для его обновления.",
         "Сложность": 2
      },
      {
         "Вопрос": "Для чего используется хук `useEffect`?",
         "Ответ": "`useEffect` позволяет выполнять побочные эффекты в функциональных компонентах. Это могут быть запросы к API, подписки, манипуляции с DOM и т.д. Он заменяет методы жизненного цикла `componentDidMount`, `componentDidUpdate` и `componentWillUnmount`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое массив зависимостей в `useEffect`?",
         "Ответ": "Это второй аргумент хука `useEffect`, представляющий собой массив. Эффект будет запускаться заново только если значения в этом массиве изменятся между рендерами. Если передать пустой массив `[]`, эффект сработает только один раз при монтировании.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое условный рендеринг (conditional rendering)?",
         "Ответ": "Это процесс отображения различных компонентов или элементов в зависимости от определенных условий (например, состояния или пропсов). В JSX это можно делать с помощью операторов `if`, тернарного оператора или логического `&&`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое управляемые и неуправляемые компоненты?",
         "Ответ": "Управляемый компонент — это элемент формы (например, `<input>`), значение которого контролируется React через состояние. Неуправляемый компонент — это элемент формы, значение которого хранится в DOM, и для доступа к нему используются рефы.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое рефы (refs) и для чего они используются?",
         "Ответ": "Рефы предоставляют способ доступа к DOM-узлам или React-элементам, созданным в методе `render()`. Они используются для управления фокусом, проигрывания медиа, интеграции со сторонними DOM-библиотеками и т.д.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Context API`?",
         "Ответ": "Context API — это механизм в React, который позволяет передавать данные через дерево компонентов без необходимости передавать пропсы вручную на каждом уровне. Он решает проблему 'проброса пропсов' (prop drilling).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `useContext`?",
         "Ответ": "Это хук, который принимает объект контекста (возвращаемый `React.createContext`) и возвращает текущее значение этого контекста. Он позволяет легко подписываться на контекст в функциональных компонентах.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое компоненты высшего порядка (Higher-Order Components, HOC)?",
         "Ответ": "HOC — это функция, которая принимает компонент и возвращает новый компонент. Это паттерн для переиспользования логики компонентов. HOC оборачивает компонент, добавляя ему новые пропсы или поведение.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `React.memo`?",
         "Ответ": "`React.memo` — это компонент высшего порядка. Он мемоизирует результат рендера компонента и предотвращает его повторный рендер, если его пропсы не изменились. Это используется для оптимизации производительности.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `useMemo`?",
         "Ответ": "`useMemo` — это хук, который мемоизирует результат выполнения функции. Он возвращает мемоизированное значение, которое пересчитывается только при изменении одной из зависимостей. Используется для оптимизации дорогостоящих вычислений.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `useCallback`?",
         "Ответ": "`useCallback` — это хук, который возвращает мемоизированную версию колбэк-функции. Эта функция будет меняться только если изменится одна из ее зависимостей. Это полезно при передаче колбэков в оптимизированные дочерние компоненты.",
         "Сложность": 6
      },
      {
         "Вопрос": "В чем разница между `useMemo` и `useCallback`?",
         "Ответ": "`useMemo` мемоизирует **результат** вызова функции (значение), а `useCallback` мемоизирует **саму функцию**. `useCallback(fn, deps)` эквивалентен `useMemo(() => fn, deps)`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `React Router`?",
         "Ответ": "React Router — это стандартная библиотека для маршрутизации в React. Она позволяет синхронизировать UI с URL, позволяя создавать одностраничные приложения (SPA) с навигацией.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `lifting state up` (поднятие состояния)?",
         "Ответ": "Это паттерн в React, при котором общее состояние нескольких компонентов выносится в их ближайший общий родительский компонент. Затем состояние передается дочерним компонентам через пропсы.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое порталы (Portals) в React?",
         "Ответ": "Порталы предоставляют способ рендерить дочерние компоненты в DOM-узел, который находится за пределами иерархии родительского компонента. Это полезно для модальных окон, всплывающих подсказок и т.д.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое предохранители (Error Boundaries)?",
         "Ответ": "Это React-компоненты, которые отлавливают ошибки JavaScript в своих дочерних компонентах, логируют эти ошибки и отображают запасной UI вместо 'сломавшегося' дерева компонентов. Реализуются через классовые компоненты с методами `getDerivedStateFromError` или `componentDidCatch`.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое фрагменты (`<Fragment>` или `<>`)?",
         "Ответ": "Фрагменты позволяют группировать список дочерних элементов без добавления лишних узлов в DOM. Это полезно, когда компонент должен возвращать несколько элементов.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое `useReducer`?",
         "Ответ": "`useReducer` — это альтернатива `useState` для управления сложным состоянием. Он принимает функцию-редьюсер и начальное состояние, и возвращает текущее состояние и `dispatch` функцию для отправки действий.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `forwardRef`?",
         "Ответ": "`React.forwardRef` — это функция, которая позволяет компоненту передавать ('пробрасывать') полученный `ref` дочернему компоненту. Это полезно для доступа к DOM-узлу дочернего компонента из родительского.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `lazy` и `Suspense`?",
         "Ответ": "`React.lazy` — это функция, которая позволяет рендерить динамический импорт как обычный компонент (code-splitting). `Suspense` — это компонент, который позволяет отображать 'запасной' UI (например, спиннер), пока дочерние компоненты загружаются.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `Redux`?",
         "Ответ": "Redux — это библиотека для управления состоянием приложения. Она основана на принципах единого источника истины (single source of truth), неизменяемого состояния и чистых функций-редьюсеров для обновления состояния.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Redux Toolkit (RTK)`?",
         "Ответ": "Redux Toolkit — это официальный, рекомендуемый способ написания Redux-логики. Он упрощает работу с Redux, уменьшает количество бойлерплейта и включает в себя полезные утилиты, такие как `createSlice` и `createAsyncThunk`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `slice` в RTK?",
         "Ответ": "`slice` — это часть состояния Redux, которая объединяет в себе редьюсер, экшены и начальное состояние для определенной 'фичи' приложения. Создается с помощью функции `createSlice`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `RTK Query`?",
         "Ответ": "RTK Query — это мощный инструмент для кеширования и получения данных, встроенный в Redux Toolkit. Он автоматизирует логику запросов к API, кеширования, инвалидации кеша и отслеживания состояния загрузки.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `endpoint` в RTK Query?",
         "Ответ": "Endpoint — это определение конкретной операции с API, такой как запрос (`query`) или мутация (`mutation`). Он описывает, как получить данные или как их изменить на сервере.",
         "Сложность": 5
      },
      {
         "Вопрос": "Чем `query` отличается от `mutation` в RTK Query?",
         "Ответ": "`query` используется для получения данных (GET-запросы). RTK Query автоматически кеширует результаты `query`. `mutation` используется для изменения данных на сервере (POST, PUT, DELETE). Результаты мутаций обычно не кешируются, но они могут инвалидировать кеш для связанных `query`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `tags` и инвалидация кеша в RTK Query?",
         "Ответ": "`tags` — это механизм для автоматического обновления данных. `query` эндпоинты 'предоставляют' (`providesTags`) теги, а `mutation` эндпоинты 'инвалидируют' (`invalidatesTags`) их. Когда мутация инвалидирует тег, все `query` с этим тегом автоматически выполняются заново.",
         "Сложность": 7
      },
      {
         "Вопрос": "Какие хуки генерирует RTK Query?",
         "Ответ": "Для каждого эндпоинта RTK Query автоматически генерирует хуки. Для `query` это `use[EndpointName]Query` и `useLazy[EndpointName]Query`. Для `mutation` это `use[EndpointName]Mutation`.",
         "Сложность": 5
      },
      {
         "Вопрос": "Как обработать ошибку запроса в RTK Query?",
         "Ответ": "Сгенерированный хук запроса (например, `useGetPostsQuery`) возвращает объект, содержащий поля `isError` (булево значение) и `error` (объект с информацией об ошибке), которые можно использовать для условного рендеринга и отображения сообщения об ошибке.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое оптимистичные обновления (optimistic updates) в RTK Query?",
         "Ответ": "Это техника, при которой UI обновляется немедленно после отправки мутации, еще до получения ответа от сервера, в предположении, что запрос будет успешным. Если запрос завершается ошибкой, изменения откатываются. Это улучшает UX.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `createApi` в RTK Query?",
         "Ответ": "Это основная функция в RTK Query, которая используется для определения набора эндпоинтов для взаимодействия с сервером. Она автоматически генерирует `slice` редьюсера, middleware, экшены и хуки.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `Tailwind CSS`?",
         "Ответ": "Tailwind CSS — это 'utility-first' CSS-фреймворк, который предоставляет набор низкоуровневых утилитарных классов (например, `flex`, `pt-4`, `text-center`), которые можно комбинировать для создания любого дизайна прямо в HTML-разметке.",
         "Сложность": 3
      },
      {
         "Вопрос": "В чем преимущество utility-first подхода?",
         "Ответ": "Он позволяет быстро создавать кастомные дизайны без написания CSS, не выходя из HTML. Это предотвращает рост CSS-файлов, избавляет от необходимости придумывать имена классам и делает компоненты более предсказуемыми и изолированными.",
         "Сложность": 4
      },
      {
         "Вопрос": "Как работает адаптивность в Tailwind?",
         "Ответ": "Адаптивность достигается с помощью префиксов, которые применяют утилиты на определенных брейкпоинтах. Например, `md:flex` применит `display: flex` только на экранах средней ширины и больше.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое JIT (Just-In-Time) компилятор в Tailwind?",
         "Ответ": "JIT-компилятор анализирует ваши файлы (HTML, JS, JSX) и генерирует CSS только для тех утилитарных классов, которые вы используете. Это приводит к очень маленькому размеру итогового CSS-файла и позволяет использовать произвольные значения (например, `top-[117px]`).",
         "Сложность": 5
      },
      {
         "Вопрос": "Как кастомизировать Tailwind?",
         "Ответ": "Кастомизация происходит в файле `tailwind.config.js`. В нем можно изменять стандартную палитру цветов, брейкпоинты, шрифты, а также добавлять свои собственные утилиты через плагины.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое директива `@apply` в Tailwind?",
         "Ответ": "`@apply` позволяет извлекать утилитарные классы в CSS-файл для создания кастомных классов компонентов. Это полезно, когда один и тот же набор утилит повторяется во многих местах.",
         "Сложность": 4
      },
      {
         "Вопрос": "Как обрабатывать состояния (hover, focus) в Tailwind?",
         "Ответ": "С помощью префиксов состояний. Например, `hover:bg-blue-700` изменит цвет фона при наведении мыши.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое HTTP?",
         "Ответ": "HTTP (HyperText Transfer Protocol) — это протокол прикладного уровня для передачи данных, в основном в виде HTML-документов. Это основа для обмена данными в вебе.",
         "Сложность": 3
      },
      {
         "Вопрос": "Какие методы HTTP-запросов вы знаете?",
         "Ответ": "Основные методы: GET (получение данных), POST (отправка данных для создания ресурса), PUT (полное обновление ресурса), PATCH (частичное обновление ресурса), DELETE (удаление ресурса).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое REST API?",
         "Ответ": "REST (Representational State Transfer) — это архитектурный стиль для создания веб-сервисов. REST API использует HTTP-методы для операций с ресурсами, которые идентифицируются по URL.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое 'prop drilling'?",
         "Ответ": "Это ситуация в React, когда данные (пропсы) передаются через несколько уровней вложенных компонентов, которые сами по себе эти данные не используют, а лишь пробрасывают их дальше. Эту проблему решает Context API или state-менеджеры.",
         "Сложность": 4
      },
      {
         "Вопрос": "Сравните `localStorage` и `cookies`.",
         "Ответ": "`localStorage` имеет больший объем (5-10 МБ), не отправляется на сервер с каждым запросом и имеет более простой API. `Cookies` имеют меньший объем (~4 КБ), отправляются на сервер с каждым запросом (что может влиять на производительность) и могут иметь срок истечения.",
         "Сложность": 4
      },
      {
         "Вопрос": "Чем классы отличаются от прототипов в JS?",
         "Ответ": "Классы в JavaScript (ES6) — это синтаксический сахар над прототипным наследованием. Они предоставляют более привычный и чистый синтаксис для создания объектов и наследования, но под капотом все еще используется механика прототипов.",
         "Сложность": 6
      },
      {
         "Вопрос": "Как работает `Object.create()`?",
         "Ответ": "Метод `Object.create()` создает новый объект с указанным объектом-прототипом и свойствами. Это прямой способ установить прототип для нового объекта.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое 'чистый' и 'нечистый' компонент в React?",
         "Ответ": "Неофициально, 'чистый' компонент при одинаковых пропсах всегда рендерит один и тот же результат. 'Нечистый' компонент может иметь внутреннее состояние или зависеть от внешних данных (например, `Math.random()`), что приводит к разным результатам рендера при тех же пропсах.",
         "Сложность": 4
      },
      {
         "Вопрос": "В чем разница между `React.Component` и `React.PureComponent`?",
         "Ответ": "`PureComponent` — это то же самое, что и `Component`, но он реализует метод `shouldComponentUpdate` с поверхностным сравнением пропсов и состояния. Это предотвращает ненужные ре-рендеры, если пропсы и состояние не изменились.",
         "Сложность": 6
      },
      {
         "Вопрос": "Как можно оптимизировать производительность React-приложения?",
         "Ответ": "Основные способы: использование `React.memo`, `useMemo`, `useCallback` для предотвращения ненужных ре-рендеров и вычислений; code-splitting с помощью `React.lazy` и `Suspense`; виртуализация списков (react-window); правильное использование ключей (`key`).",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое 'synthetic events' в React?",
         "Ответ": "Это кросс-браузерная обертка вокруг нативных событий браузера. SyntheticEvent имеет тот же интерфейс, что и нативное событие, но работает одинаково во всех браузерах.",
         "Сложность": 5
      },
      {
         "Вопрос": "Можно ли использовать `async/await` в `useEffect`?",
         "Ответ": "Не напрямую. Функция, передаваемая в `useEffect`, не должна быть асинхронной, так как она должна возвращать либо ничего, либо функцию очистки. Чтобы использовать `async/await`, нужно объявить асинхронную функцию внутри эффекта и вызвать ее.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое 'hydration' в React?",
         "Ответ": "Это процесс, с помощью которого React 'оживляет' статический HTML, отрендеренный на сервере (SSR), привязывая к нему обработчики событий и состояние на стороне клиента. После гидратации приложение становится полностью интерактивным.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `children` prop?",
         "Ответ": "`props.children` — это специальный проп, который содержит все, что передается между открывающим и закрывающим тегами компонента. Это позволяет создавать 'оберточные' или композитные компоненты.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `npm` / `yarn`?",
         "Ответ": "Это менеджеры пакетов для JavaScript. Они используются для установки, обновления и управления зависимостями (библиотеками и инструментами) в проекте.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое файл `package.json`?",
         "Ответ": "Это файл-манифест проекта, который содержит метаданные о проекте (имя, версия), список зависимостей (`dependencies` и `devDependencies`) и скрипты для запуска (`scripts`).",
         "Сложность": 2
      },
      {
         "Вопрос": "В чем разница между `dependencies` и `devDependencies`?",
         "Ответ": "`dependencies` — это пакеты, необходимые для работы приложения в продакшене. `devDependencies` — это пакеты, нужные только для разработки и сборки (например, линтеры, сборщики, тестовые фреймворки).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое семантическое версионирование (SemVer)?",
         "Ответ": "Это стандарт для версионирования программного обеспечения в формате MAJOR.MINOR.PATCH. MAJOR меняется при несовместимых изменениях API, MINOR — при добавлении функциональности с сохранением обратной совместимости, PATCH — при исправлении ошибок с сохранением обратной совместимости.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое Git?",
         "Ответ": "Git — это распределенная система контроля версий. Она используется для отслеживания изменений в исходном коде во время разработки программного обеспечения.",
         "Сложность": 2
      },
      {
         "Вопрос": "Какие основные команды Git вы используете?",
         "Ответ": "Основные команды: `git clone`, `git add`, `git commit`, `git push`, `git pull`, `git branch`, `git checkout`, `git merge`, `git status`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `git merge` и `git rebase`?",
         "Ответ": "Оба служат для интеграции изменений из одной ветки в другую. `merge` создает новый 'коммит слияния', сохраняя историю обеих веток. `rebase` 'перемещает' коммиты одной ветки поверх другой, создавая линейную историю.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `type guard` в TypeScript?",
         "Ответ": "Type guard — это выражение, которое выполняет проверку типа во время выполнения и гарантирует этот тип в определенной области видимости. Примеры: `typeof`, `instanceof`, `in`, а также пользовательские функции-предикаты (например, `function isFish(pet: Fish | Bird): pet is Fish`).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `tuple` в TypeScript?",
         "Ответ": "`tuple` (кортеж) — это тип, который представляет собой массив с фиксированным числом элементов, типы которых известны, но не обязательно одинаковы. Например, `[string, number]`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Как работает перегрузка функций в TypeScript?",
         "Ответ": "Перегрузка позволяет одной функции иметь несколько сигнатур (разные типы или количество аргументов). Вы объявляете несколько определений функции (сигнатур) и одну реализацию, которая должна быть совместима со всеми сигнатурами.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `render prop`?",
         "Ответ": "Это паттерн в React, при котором компонент принимает в качестве пропа функцию, которая возвращает React-элемент. Компонент вызывает эту функцию вместо реализации своей собственной логики рендеринга. Это способ поделиться поведением между компонентами.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что делает `React.StrictMode`?",
         "Ответ": "`<StrictMode>` — это инструмент для выявления потенциальных проблем в приложении. Он активирует дополнительные проверки и предупреждения для своих потомков. Например, он помогает обнаружить небезопасные методы жизненного цикла или неожиданные побочные эффекты.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `tree shaking`?",
         "Ответ": "Это процесс удаления 'мертвого' (неиспользуемого) кода из финальной сборки приложения. Современные сборщики, такие как Webpack, автоматически выполняют tree shaking для ES-модулей, что помогает уменьшить размер бандла.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `CSS-in-JS`? Приведите примеры библиотек.",
         "Ответ": "Это подход, при котором стили для компонентов пишутся на JavaScript, а не в отдельных CSS-файлах. Это позволяет использовать всю мощь JS (переменные, функции) для стилизации и обеспечивает лучшую инкапсуляцию стилей. Примеры: `Styled Components`, `Emotion`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `SSR` (Server-Side Rendering)?",
         "Ответ": "SSR — это рендеринг React-компонентов в HTML на сервере. Браузер получает готовую HTML-страницу, что улучшает SEO и perceived performance (пользователь быстрее видит контент).",
         "Сложность": 7
      },
      {
         "Вопрос": "Чем `SSR` отличается от `CSR` (Client-Side Rendering)?",
         "Ответ": "При CSR (стандартный подход для React) браузер получает почти пустой HTML-файл и большой JS-бандл. JavaScript затем рендерит все приложение на клиенте. При SSR сервер сразу отдает готовую HTML-страницу.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `SSG` (Static Site Generation)?",
         "Ответ": "SSG — это процесс генерации всех HTML-страниц сайта во время сборки (build time). Это обеспечивает максимальную производительность, так как серверу нужно просто отдавать статические файлы. Подходит для сайтов, контент которых не меняется часто. Пример фреймворка: `Next.js`, `Gatsby`.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `Web Vitals`?",
         "Ответ": "Это инициатива Google, направленная на предоставление единых рекомендаций по качеству, необходимому для обеспечения высокого уровня взаимодействия с пользователем в Интернете. Основные метрики: LCP (Largest Contentful Paint), FID (First Input Delay), CLS (Cumulative Layout Shift).",
         "Сложность": 6
      },
      {
         "Вопрос": "Объясните `flexbox`.",
         "Ответ": "Flexbox — это модель компоновки в CSS, предназначенная для создания одномерных макетов. Она позволяет легко выравнивать, распределять и упорядочивать элементы внутри контейнера, даже если их размер неизвестен.",
         "Сложность": 4
      },
      {
         "Вопрос": "Объясните `CSS Grid`.",
         "Ответ": "CSS Grid — это двумерная система сеток для CSS. Она позволяет располагать элементы в строках и столбцах, что делает ее идеальной для создания сложных макетов страниц.",
         "Сложность": 5
      },
      {
         "Вопрос": "В чем разница между `rem` и `em`?",
         "Ответ": "Обе единицы являются относительными. `em` зависит от размера шрифта родительского элемента. `rem` (root em) зависит от размера шрифта корневого элемента (`<html>`), что делает его более предсказуемым для создания масштабируемых интерфейсов.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое специфичность в CSS?",
         "Ответ": "Специфичность — это алгоритм, который браузеры используют для определения, какой CSS-селектор является наиболее релевантным и, следовательно, какое CSS-правило будет применено к элементу. Селекторы по ID имеют более высокую специфичность, чем селекторы по классу, которые, в свою очередь, более специфичны, чем селекторы по тегу.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое модель 'коробки' (box model) в CSS?",
         "Ответ": "Это модель, которая описывает каждый HTML-элемент как прямоугольную коробку. Она состоит из четырех областей: контент (content), внутренний отступ (padding), рамка (border) и внешний отступ (margin).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что делает свойство `box-sizing: border-box`?",
         "Ответ": "Оно изменяет поведение box model. По умолчанию, `width` и `height` элемента применяются только к области контента. С `border-box` `width` и `height` включают в себя и `padding`, и `border`, что делает верстку более интуитивной.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `Z-index`?",
         "Ответ": "`z-index` — это CSS-свойство, которое управляет вертикальным порядком наложения элементов (их 'стопкой'). Оно работает только для позиционированных элементов (position не равен `static`).",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое 'схлопывание' `margin`'ов?",
         "Ответ": "Это поведение, при котором вертикальные отступы (`margin-top` и `margin-bottom`) двух или более смежных блочных элементов объединяются в один, равный наибольшему из них. Это происходит только в вертикальном направлении.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое псевдо-классы и псевдо-элементы?",
         "Ответ": "Псевдо-классы (например, `:hover`, `:focus`) используются для стилизации элементов в определенном состоянии. Псевдо-элементы (например, `::before`, `::after`) позволяют стилизовать определенную часть элемента.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое 'shadow DOM'?",
         "Ответ": "Shadow DOM — это технология, позволяющая инкапсулировать DOM-дерево и стили внутри веб-компонента. Это предотвращает конфликты стилей и делает компоненты по-настоящему автономными.",
         "Сложность": 8
      },
      {
         "Вопрос": "Как сделать глубокое копирование объекта в JS?",
         "Ответ": "Надежный способ — использовать `JSON.parse(JSON.stringify(obj))`, но он не работает с функциями, `undefined` и т.д. Более современный и правильный способ — `structuredClone(obj)`. Также можно написать рекурсивную функцию или использовать утилиты из библиотек, например, `lodash.cloneDeep`.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое опциональная цепочка (`?.`)?",
         "Ответ": "Это синтаксис, который позволяет безопасно обращаться к свойствам глубоко вложенных объектов. Если на каком-то уровне свойство окажется `null` или `undefined`, выражение не вызовет ошибку, а просто вернет `undefined`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое оператор нулевого слияния (`??`)?",
         "Ответ": "Оператор `a ?? b` возвращает `b`, если `a` равно `null` или `undefined`, и `a` в противном случае. В отличие от `||`, он не реагирует на другие 'ложные' значения, такие как `0`, `''` или `false`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `IndexedDB`?",
         "Ответ": "Это низкоуровневый API для хранения значительных объемов структурированных данных на стороне клиента. Это полноценная транзакционная база данных в браузере.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `Service Workers`?",
         "Ответ": "Service Worker — это скрипт, который браузер запускает в фоновом режиме, отдельно от веб-страницы. Он позволяет реализовывать такие вещи, как оффлайн-режим (через кеширование запросов), push-уведомления и фоновую синхронизацию данных.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `PWA` (Progressive Web App)?",
         "Ответ": "PWA — это веб-приложение, которое использует современные веб-технологии (такие как Service Workers, Web App Manifest), чтобы обеспечить пользователям опыт, схожий с нативными приложениями (установка на рабочий стол, оффлайн-работа, push-уведомления).",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `WebSockets`?",
         "Ответ": "WebSocket — это протокол связи, который обеспечивает полнодуплексную (двустороннюю) связь между клиентом и сервером через одно TCP-соединение. Он идеально подходит для приложений, требующих обмена данными в реальном времени (чаты, игры).",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `debounce` и `throttle`?",
         "Ответ": "Это техники для оптимизации обработки часто вызываемых событий (например, `scroll`, `resize`). `Debounce` откладывает выполнение функции до тех пор, пока не пройдет определенное время с момента последнего вызова. `Throttle` гарантирует, что функция будет вызываться не чаще, чем раз в определенный интервал времени.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `Aria` атрибуты и зачем они нужны?",
         "Ответ": "`ARIA` (Accessible Rich Internet Applications) — это набор атрибутов, которые можно добавлять в HTML, чтобы сделать веб-приложения более доступными для людей с ограниченными возможностями, использующих вспомогательные технологии (например, скринридеры).",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `webpack-dev-server`?",
         "Ответ": "Это инструмент для разработки, который предоставляет 'живой' сервер с 'горячей' перезагрузкой модулей (Hot Module Replacement, HMR). При изменении кода он автоматически обновляет приложение в браузере без полной перезагрузки страницы.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `BEM` (БЭМ)?",
         "Ответ": "БЭМ (Блок, Элемент, Модификатор) — это методология именования CSS-классов, которая помогает создавать переиспользуемые и поддерживаемые компоненты. Она делает структуру CSS более понятной и предотвращает конфликты стилей.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Sass/SCSS`?",
         "Ответ": "Это препроцессор CSS, который расширяет его возможности, добавляя переменные, вложенность, миксины, наследование и другие функции, которые делают написание CSS более удобным и организованным.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `styled-components`?",
         "Ответ": "Это библиотека для React, реализующая подход CSS-in-JS. Она позволяет писать настоящий CSS в JavaScript-файлах для стилизации компонентов. Стили привязываются к конкретному компоненту, что обеспечивает инкапсуляцию.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое кастомные хуки в React?",
         "Ответ": "Кастомный хук — это JavaScript-функция, имя которой начинается с `use`, и которая может вызывать другие хуки. Это механизм для извлечения и переиспользования логики с состоянием между компонентами.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Fiber` в React?",
         "Ответ": "React Fiber — это новый механизм согласования (reconciliation), который является основной React 16+. Он позволяет React приостанавливать, возобновлять или отменять работу над обновлением UI, что делает рендеринг асинхронным и неблокирующим.",
         "Сложность": 9
      },
      {
         "Вопрос": "Как работает `useRef`?",
         "Ответ": "`useRef` возвращает изменяемый ref-объект, свойство `.current` которого инициализируется переданным аргументом. Возвращаемый объект будет сохраняться в течение всего времени жизни компонента. Основные применения: доступ к DOM-узлам и хранение изменяемых значений, которые не вызывают ре-рендер.",
         "Сложность": 5
      },
      {
         "Вопрос": "Как передать данные от дочернего компонента к родительскому?",
         "Ответ": "Самый распространенный способ — передать из родительского компонента в дочерний колбэк-функцию через пропсы. Дочерний компонент затем вызывает эту функцию, передавая в нее необходимые данные.",
         "Сложность": 3
      },
      {
         "Вопрос": "Для чего используется `Object.is()`?",
         "Ответ": "Метод `Object.is()` определяет, являются ли два значения одинаковыми. Он похож на `===`, но с двумя отличиями: `Object.is(NaN, NaN)` возвращает `true`, и `Object.is(-0, +0)` возвращает `false`.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `void` в TypeScript?",
         "Ответ": "Тип `void` используется в качестве возвращаемого типа функций, которые не возвращают никакого значения. Например, функция, которая просто выводит что-то в консоль, будет иметь возвращаемый тип `void`.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое декораторы в TypeScript?",
         "Ответ": "Декораторы — это специальный вид объявлений, которые можно применять к классам, методам, свойствам или параметрам. Они используют синтаксис `@expression` и являются функцией, которая вызывается во время определения с информацией о декорируемом элементе.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `module resolution` в TypeScript?",
         "Ответ": "Это процесс, который компилятор использует для определения того, на что ссылается импорт. Например, когда вы пишете `import { a } from 'moduleA'`, компилятор должен найти файл, который предоставляет `moduleA`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `Immer` и как он используется в RTK?",
         "Ответ": "`Immer` — это библиотека, которая упрощает работу с неизменяемыми состояниями. Она позволяет писать код, который выглядит как мутирующий, но на самом деле создает новые иммутабельные состояния. Redux Toolkit использует Immer 'под капотом' в `createSlice`, что позволяет 'мутировать' состояние в редьюсерах.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `middleware` в Redux?",
         "Ответ": "Middleware (промежуточное ПО) — это код, который встраивается между отправкой действия (`dispatch`) и моментом, когда оно достигает редьюсера. Он позволяет выполнять асинхронные операции, логировать действия, модифицировать их и т.д. RTK Query реализован как middleware.",
         "Сложность": 7
      },
      {
         "Вопрос": "Как подключить Redux к React-компонентам?",
         "Ответ": "С помощью библиотеки `react-redux`. Все приложение оборачивается в компонент `<Provider>`, в который передается `store`. В компонентах для доступа к состоянию используется хук `useSelector`, а для отправки действий — `useDispatch`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Как сгенерировать произвольное значение в JIT-режиме Tailwind?",
         "Ответ": "Используя квадратные скобки. Например, `w-[300px]` сгенерирует класс `width: 300px;`. Это можно применять ко многим утилитам, таким как цвета, отступы и т.д.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `base` и `components` слои в Tailwind?",
         "Ответ": "Tailwind использует `@tailwind` директивы для управления порядком стилей. `@tailwind base` — это базовые стили и сбросы (reset). `@tailwind components` — это классы компонентов (например, для кнопок). `@tailwind utilities` — это утилитарные классы.",
         "Сложность": 5
      },
      {
         "Вопрос": "Как работает `peer` state в Tailwind?",
         "Ответ": "Модификатор `peer` позволяет стилизовать один элемент на основе состояния его 'соседнего' (sibling) элемента. Например, можно изменить стиль метки (`<label>`), когда соответствующий ей инпут (`<input>`) находится в фокусе.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое 'контекст выполнения' (Execution Context) в JS?",
         "Ответ": "Это абстрактное понятие, которое описывает окружение, в котором выполняется код JavaScript. Каждый контекст имеет свою область видимости (scope chain), переменную `this` и объект переменных. Существуют глобальный и функциональный контексты.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `Temporal Dead Zone` (TDZ)?",
         "Ответ": "Это область кода, где переменные, объявленные с помощью `let` и `const`, уже существуют, но к ним нельзя получить доступ. TDZ начинается с начала блочной области видимости и заканчивается в месте объявления переменной.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `CORS preflight request`?",
         "Ответ": "Это запрос, который браузер автоматически отправляет перед 'сложными' кросс-доменными запросами (например, с методами PUT, DELETE или с нестандартными заголовками). Он использует метод `OPTIONS` и спрашивает у сервера, безопасен ли основной запрос.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `JWT` (JSON Web Token)?",
         "Ответ": "Это открытый стандарт для создания токенов доступа, которые используются для безопасной передачи информации между сторонами в виде JSON-объекта. Часто используется для аутентификации и авторизации в веб-приложениях.",
         "Сложность": 6
      },
      {
         "Вопрос": "Чем отличаются `GET` и `POST` запросы?",
         "Ответ": "`GET` используется для запроса данных, параметры передаются в URL, он кешируется и может быть добавлен в закладки. `POST` используется для отправки данных на сервер для обработки, данные передаются в теле запроса, он не кешируется и не сохраняется в истории браузера.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `fetch API`?",
         "Ответ": "Это современный интерфейс JavaScript для выполнения HTTP-запросов. Он основан на промисах и является более гибкой и мощной альтернативой `XMLHttpRequest`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `XSS` (Cross-Site Scripting)?",
         "Ответ": "Это тип уязвимости, при которой злоумышленник внедряет вредоносный JavaScript-код на веб-страницу, который затем выполняется в браузере другого пользователя. React по умолчанию экранирует данные, выводимые в JSX, что защищает от большинства XSS-атак.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `CSRF` (Cross-Site Request Forgery)?",
         "Ответ": "Это атака, которая заставляет аутентифицированного пользователя выполнять нежелательные действия на веб-приложении. Например, перейдя по вредоносной ссылке, пользователь может незаметно для себя отправить запрос на смену пароля.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `npm ci` и чем он отличается от `npm install`?",
         "Ответ": "`npm install` устанавливает зависимости на основе `package.json` и может обновлять `package-lock.json`. `npm ci` (clean install) удаляет `node_modules` и устанавливает зависимости строго по `package-lock.json`. Он быстрее и надежнее для сборок на серверах.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Array.from()`?",
         "Ответ": "Статический метод, который создает новый экземпляр массива из итерируемого или псевдо-массива (например, `NodeList` или объекта `arguments`).",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `Array.prototype.includes()`?",
         "Ответ": "Метод, который определяет, содержит ли массив определенный элемент, возвращая `true` или `false`. В отличие от `indexOf`, он может находить `NaN`.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое `Object.entries()`?",
         "Ответ": "Метод, который возвращает массив собственных перечисляемых пар `[ключ, значение]` для данного объекта.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `Object.values()`?",
         "Ответ": "Метод, который возвращает массив значений собственных перечисляемых свойств объекта.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `BigInt`?",
         "Ответ": "Это примитивный тип в JavaScript, который может представлять целые числа произвольной точности. Он нужен для работы с числами, которые превышают `Number.MAX_SAFE_INTEGER`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `React.Children.map()`?",
         "Ответ": "Это утилита React, которая позволяет безопасно итерироваться по `props.children`. Она обрабатывает случаи, когда `children` является одним элементом, массивом или `undefined`, в отличие от обычного `children.map()`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Как предотвратить ре-рендер компонента в React?",
         "Ответ": "Использовать `React.memo` для функциональных компонентов или `React.PureComponent` для классовых. Также можно вручную реализовать `shouldComponentUpdate` в классовом компоненте. Важно убедиться, что пропсы (особенно функции и объекты) не создаются заново при каждом рендере родителя, используя `useCallback` и `useMemo`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `controlled` и `uncontrolled` компоненты в React?",
         "Ответ": "`Controlled component` (управляемый) — это компонент формы, чье значение контролируется состоянием React. `Uncontrolled component` (неуправляемый) хранит свое значение в DOM, и для доступа к нему используются рефы. Управляемые компоненты предпочтительнее.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `createRoot` в React 18?",
         "Ответ": "Это новый API для рендеринга приложения, который заменяет `ReactDOM.render`. Он включает по умолчанию конкурентный режим (Concurrent Mode), который открывает новые возможности, такие как автоматический батчинг обновлений и плавные переходы.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `useTransition`?",
         "Ответ": "Это хук в React 18, который позволяет помечать некоторые обновления состояния как 'несрочные'. React может прерывать рендеринг этих обновлений, если появятся более срочные (например, ввод пользователя), что помогает сохранить отзывчивость интерфейса.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `useDeferredValue`?",
         "Ответ": "Это хук в React 18, который позволяет 'отложить' обновление части UI. Он возвращает предыдущую версию значения, пока готовится новая, что предотвращает 'зависание' интерфейса во время рендеринга ресурсоемких компонентов.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `satisfies` оператор в TypeScript?",
         "Ответ": "Оператор `satisfies` позволяет проверить, соответствует ли выражение определенному типу, но при этом сохранить исходный, более конкретный тип этого выражения. Это полезно, когда нужно убедиться в корректности структуры объекта, не теряя информацию о его точных типах.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `const` assertions в TypeScript?",
         "Ответ": "Добавление `as const` к значению говорит TypeScript рассматривать его как максимально специфичную литеральную константу. Для объектов это делает все свойства `readonly`, а для массивов создает `readonly` кортеж (tuple).",
         "Сложность": 6
      },
      {
         "Вопрос": "В чем разница между `interface` и `class` в TypeScript?",
         "Ответ": "`interface` существует только на уровне типов и описывает форму объекта; он стирается при компиляции в JavaScript. `class` — это и тип, и значение. Он компилируется в JavaScript-класс и может содержать реализацию (методы, конструктор).",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `skipToken` в RTK Query?",
         "Ответ": "`skipToken` — это специальное значение, которое можно передать в качестве аргумента хука `useQuery`. Если хук получает `skipToken`, он не будет выполнять запрос. Это полезно для условных запросов, когда какие-то данные еще не готовы.",
         "Сложность": 6
      },
      {
         "Вопрос": "Как сделать 'polling' (периодические запросы) в RTK Query?",
         "Ответ": "В хуке `useQuery` можно передать опцию `pollingInterval` с указанием интервала в миллисекундах. RTK Query будет автоматически повторять запрос через заданный промежуток времени.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `baseQuery` в `createApi`?",
         "Ответ": "Это основная функция, которую RTK Query будет использовать для выполнения всех запросов. Обычно для этого используется `fetchBaseQuery`, который является оберткой над `fetch` и упрощает обработку запросов, заголовков и ответов.",
         "Сложность": 5
      },
      {
         "Вопрос": "Для чего нужна директива `@layer` в Tailwind?",
         "Ответ": "`@layer` позволяет Tailwind правильно сортировать ваши кастомные стили и помещать их в соответствующие 'слои' (`base`, `components`, `utilities`), чтобы они не конфликтовали с утилитами Tailwind и работали предсказуемо.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое плагины в Tailwind?",
         "Ответ": "Плагины — это JavaScript-функции, которые расширяют возможности Tailwind. С их помощью можно добавлять новые утилиты, компоненты или даже кастомные варианты состояний.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `webpack loader`?",
         "Ответ": "Loader в Webpack — это трансформер, который обрабатывает файлы перед добавлением их в граф зависимостей. Например, `babel-loader` транспилирует JS-код, `css-loader` обрабатывает CSS-файлы.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `webpack plugin`?",
         "Ответ": "Плагин в Webpack 'подключается' к процессу сборки и может выполнять более широкий спектр задач, чем лоадеры. Например, `HtmlWebpackPlugin` генерирует HTML-файл, а `MiniCssExtractPlugin` извлекает CSS в отдельные файлы.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое итераторы и итерируемые объекты в JS?",
         "Ответ": "Итерируемый объект — это объект, который реализует метод `[Symbol.iterator]`. Этот метод возвращает итератор — объект с методом `next()`, который, в свою очередь, возвращает `{ value, done }`. Этот протокол позволяет объектам (таким как `Array`, `String`, `Map`) использоваться в циклах `for...of`.",
         "Сложность": 7
      },
      {
         "Вопрос": "Как работает `for...in` и чем он отличается от `for...of`?",
         "Ответ": "`for...in` итерируется по перечисляемым свойствам (ключам) объекта, включая унаследованные. `for...of` итерируется по значениям итерируемых объектов (массивы, строки, `Map`, `Set`) и не работает с обычными объектами.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `URLSearchParams`?",
         "Ответ": "Это встроенный API, который предоставляет утилиты для работы с строкой запроса (query string) URL. Он позволяет легко читать, изменять и конструировать параметры URL.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `Date` объект и какие у него есть проблемы?",
         "Ответ": "Объект `Date` используется для работы с датами и временем. Основные проблемы: сложный API, зависимость от системного времени пользователя, проблемы с часовыми поясами. Для серьезных задач часто используют библиотеки, такие как `date-fns` или `day.js`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое 'props drilling' и как с ним бороться?",
         "Ответ": "Это синоним `prop drilling`. Бороться с ним можно, используя `Context API` для передачи глобальных данных (тема, язык) или `state management` библиотеки (Redux) для управления состоянием приложения.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое 'composition' (композиция) в React?",
         "Ответ": "Это основной принцип React. Вместо наследования для переиспользования кода между компонентами используется композиция. Компоненты могут содержать другие компоненты, передавать их через пропсы (`children` или другие) или настраиваться с помощью пропсов.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `getDerivedStateFromProps` и почему его следует избегать?",
         "Ответ": "Это статический метод жизненного цикла в классовых компонентах, который позволяет компоненту обновлять свое состояние в ответ на изменение пропсов. Его следует избегать, так как он часто используется неправильно и приводит к сложному коду. В большинстве случаев есть более простые альтернативы (например, вычисление значений во время рендера или использование `useEffect`).",
         "Сложность": 8
      },
      {
         "Вопрос": "Как отменить `fetch` запрос?",
         "Ответ": "С помощью `AbortController`. Создается экземпляр `AbortController`, его свойство `signal` передается в опции `fetch`. Для отмены запроса вызывается метод `controller.abort()`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `MutationObserver`?",
         "Ответ": "Это веб-API, которое предоставляет возможность наблюдать за изменениями в DOM-дереве. Он может отслеживать добавление/удаление узлов, изменение атрибутов или текстового содержимого.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `IntersectionObserver`?",
         "Ответ": "Это веб-API, которое позволяет асинхронно отслеживать пересечение целевого элемента с его родителем или с областью видимости документа (viewport). Идеально подходит для реализации 'ленивой' загрузки изображений или бесконечной прокрутки.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `package-lock.json`?",
         "Ответ": "Этот файл автоматически генерируется `npm` и содержит точные версии всех установленных зависимостей и их зависимостей. Он гарантирует, что у всех разработчиков в команде и на сервере сборки будут установлены абсолютно одинаковые пакеты.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `npx`?",
         "Ответ": "`npx` — это утилита, которая поставляется вместе с `npm`. Она позволяет запускать пакеты из реестра `npm`, не устанавливая их глобально или локально в проект. Например, `npx create-react-app my-app`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Что такое `React Testing Library`?",
         "Ответ": "Это библиотека для тестирования React-компонентов, которая поощряет написание тестов, имитирующих поведение пользователя. Она фокусируется не на деталях реализации компонента, а на том, как он выглядит и работает для пользователя.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Jest`?",
         "Ответ": "Jest — это JavaScript-фреймворк для тестирования, разработанный Facebook. Он часто используется вместе с React Testing Library и предоставляет все необходимое для тестирования: ранер тестов, библиотеку утверждений (assertions) и моки.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `atomic design`?",
         "Ответ": "Это методология создания дизайн-систем. Она предлагает разбивать интерфейс на пять уровней: Атомы (базовые HTML-теги), Молекулы (группы атомов), Организмы (группы молекул), Шаблоны (структура страницы) и Страницы (конкретные экземпляры шаблонов).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `memoization` (мемоизация)?",
         "Ответ": "Это техника оптимизации, которая заключается в кешировании результатов выполнения ресурсоемких функций. При повторном вызове с теми же аргументами функция возвращает результат из кеша, а не выполняет вычисления заново. Хуки `useMemo` и `useCallback` используют этот принцип.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `DOMContentLoaded` событие?",
         "Ответ": "Это событие, которое срабатывает, когда исходный HTML-документ был полностью загружен и разобран, без ожидания окончания загрузки таблиц стилей, изображений и подфреймов.",
         "Сложность": 4
      },
      {
         "Вопрос": "В чем разница между `load` и `DOMContentLoaded`?",
         "Ответ": "`DOMContentLoaded` срабатывает, когда готов DOM. `load` срабатывает, когда готова вся страница, включая все зависимые ресурсы, такие как стили и изображения.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Accessibility` (a11y)?",
         "Ответ": "Веб-доступность (accessibility, сокращенно a11y) — это практика создания веб-сайтов, которыми могут пользоваться все люди, независимо от их физических или технических ограничений. Это включает использование семантического HTML, ARIA-атрибутов, обеспечение контрастности и навигации с клавиатуры.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `Critical Rendering Path`?",
         "Ответ": "Это последовательность шагов, которую браузер выполняет для преобразования HTML, CSS и JavaScript в пиксели на экране. Оптимизация этого пути (например, путем уменьшения размера CSS/JS, отложенной загрузки) критически важна для производительности страницы.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `TailwindCSS` пресеты?",
         "Ответ": "Пресет — это базовая конфигурация для `tailwind.config.js`. Он позволяет делиться общей конфигурацией Tailwind (темы, плагины) между несколькими проектами.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что делает `group` state в Tailwind?",
         "Ответ": "Модификатор `group` позволяет стилизовать дочерний элемент на основе состояния родительского элемента. Для этого родительскому элементу добавляется класс `group`, а дочернему — префикс `group-hover:`, `group-focus:` и т.д.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `Branded Types` (или `Nominal Typing`) в TypeScript?",
         "Ответ": "Это техника, позволяющая создавать типы, которые структурно идентичны, но несовместимы друг с другом. Например, можно создать типы `UserID` и `PostID`, оба из которых являются строками, но их нельзя будет присвоить друг другу. Это повышает безопасность типов.",
         "Сложность": 8
      },
      {
         "Вопрос": "Что такое `thunk` в контексте Redux?",
         "Ответ": "`Thunk` — это функция, которая оборачивает выражение для отложенного вычисления. В Redux, `redux-thunk` — это middleware, который позволяет экшенам возвращать функции вместо объектов. Эти функции получают `dispatch` и `getState` в качестве аргументов и используются для выполнения асинхронной логики.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `selector` в Redux?",
         "Ответ": "Селектор — это функция, которая принимает состояние Redux в качестве аргумента и возвращает некоторые данные из него. Использование селекторов (особенно с библиотекой `reselect` для мемоизации) помогает инкапсулировать структуру состояния и оптимизировать производительность.",
         "Сложность": 5
      },
      {
         "Вопрос": "Как выполнить запрос при клике с помощью RTK Query?",
         "Ответ": "Нужно использовать 'ленивый' хук запроса, который генерируется автоматически: `useLazy[EndpointName]Query`. Он возвращает кортеж с функцией-триггером и объектом результата. Эту функцию-триггер можно вызвать в обработчике `onClick`.",
         "Сложность": 5
      },
      {
         "Вопрос": "Как сбросить состояние RTK Query?",
         "Ответ": "API slice, созданный с помощью `createApi`, предоставляет экшен `api.util.resetApiState()`. Его можно задиспатчить, чтобы полностью очистить весь кеш, подписки и состояние, связанные с этим API.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `JSX.Element` и `React.ReactNode`?",
         "Ответ": "`JSX.Element` — это тип результата вызова `React.createElement`. `React.ReactNode` — это более широкий тип, который включает в себя `JSX.Element`, а также `string`, `number`, `boolean`, `null`, `undefined` и массив `ReactNode`. Обычно проп `children` имеет тип `React.ReactNode`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Как типизировать хук `useState`?",
         "Ответ": "TypeScript часто может вывести тип автоматически из начального значения. Если тип нужно указать явно (например, если начальное значение `null`), он передается в качестве дженерик-аргумента: `useState<string | null>(null)`.",
         "Сложность": 3
      },
      {
         "Вопрос": "Как типизировать обработчик событий в React, например `onClick`?",
         "Ответ": "Нужно использовать типы событий, которые предоставляет React. Например, для клика по кнопке тип события будет `React.MouseEvent<HTMLButtonElement>`.",
         "Сложность": 4
      },
      {
         "Вопрос": "Что такое `unknown` по сравнению с `any`?",
         "Ответ": "`any` полностью отключает проверку типов. `unknown` — это типобезопасный аналог `any`. Вы не можете делать ничего с переменной типа `unknown` без предварительной проверки типа (сужения типа). Это заставляет писать более безопасный код.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `void` оператор в JavaScript?",
         "Ответ": "Оператор `void` вычисляет выражение и возвращает `undefined`. Часто используется как `void 0` в качестве короткого и надежного способа получить `undefined`.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое каррирование (currying)?",
         "Ответ": "Это преобразование функции с несколькими аргументами в последовательность функций, каждая из которых принимает один аргумент. Например, `f(a, b)` становится `f(a)(b)`.",
         "Сложность": 7
      },
      {
         "Вопрос": "В чем разница между `null` и `undefined`?",
         "Ответ": "`undefined` означает, что переменная объявлена, но ей не присвоено значение. `null` — это значение, которое присваивается явно и представляет собой намеренное отсутствие какого-либо объекта.",
         "Сложность": 2
      },
      {
         "Вопрос": "Что такое 'Temporal Dead Zone'?",
         "Ответ": "Это период времени от входа в область видимости до объявления переменной (`let` или `const`). В этой 'зоне' переменная не может быть доступна, иначе произойдет `ReferenceError`.",
         "Сложность": 7
      },
      {
         "Вопрос": "Почему в `useEffect` с пустым массивом зависимостей функции могут 'видеть' устаревшее состояние?",
         "Ответ": "Потому что функция внутри `useEffect` является замыканием. Она 'захватывает' значения состояния и пропсов на момент своего создания (т.е. на момент рендера). Если эффект запускается только один раз, это замыкание никогда не обновится и всегда будет ссылаться на начальные значения.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `Strict Mode` в React?",
         "Ответ": "Это инструмент для выявления потенциальных проблем в приложении. Он активирует дополнительные проверки, например, намеренно вызывает некоторые функции (такие как рендер и эффекты) дважды в режиме разработки, чтобы помочь найти непреднамеренные побочные эффекты.",
         "Сложность": 5
      },
      {
         "Вопрос": "Как работает алгоритм 'diffing' в React?",
         "Ответ": "React сравнивает старый и новый Virtual DOM. Если корневые элементы имеют разные типы, он уничтожает старое дерево и строит новое. Если типы одинаковые, он сравнивает атрибуты и обновляет только измененные. При сравнении списков он использует ключи (`key`) для сопоставления элементов.",
         "Сложность": 7
      },
      {
         "Вопрос": "Что такое `CSS Modules`?",
         "Ответ": "Это подход, при котором все имена классов в CSS-файле по умолчанию имеют локальную область видимости (генерируются уникальные имена). Это решает проблему глобальных CSS и конфликтов имен. Используется в Create React App.",
         "Сложность": 5
      },
      {
         "Вопрос": "Что такое `SVG` и чем он лучше растровых изображений?",
         "Ответ": "SVG (Scalable Vector Graphics) — это формат векторной графики. В отличие от растровых форматов (JPEG, PNG), SVG основан на XML и описывает изображение с помощью математических фигур. Он бесконечно масштабируется без потери качества и часто имеет меньший размер файла. Им можно управлять через CSS и JS.",
         "Сложность": 4
      },
      {
         "Вопрос": "Опишите `git flow`.",
         "Ответ": "Это модель ветвления в Git. Она включает долгоживущие ветки `master` (для релизов) и `develop` (для текущей разработки), а также короткоживущие ветки для фич (`feature`), исправлений (`bugfix`) и хотфиксов (`hotfix`).",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `cherry-pick` в Git?",
         "Ответ": "Это команда, которая позволяет применить изменения из одного или нескольких существующих коммитов в другую ветку. Она 'выбирает' конкретный коммит и применяет его как новый коммит в текущей ветке.",
         "Сложность": 6
      },
      {
         "Вопрос": "Что такое `SOLID`?",
         "Ответ": "Это акроним для пяти принципов объектно-ориентированного дизайна: Single Responsibility (Единственной ответственности), Open/Closed (Открытости/закрытости), Liskov Substitution (Подстановки Барбары Лисков), Interface Segregation (Разделения интерфейса) и Dependency Inversion (Инверсии зависимостей). Эти принципы помогают создавать более понятный, гибкий и поддерживаемый код.",
         "Сложность": 7
      }
   ]
}